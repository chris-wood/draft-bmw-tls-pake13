{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-11-10T00:17:45.863905+00:00",
  "repo": "chris-wood/draft-bmw-tls-pake13",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "I_kwDOM83jm86dcuFH",
      "title": "Discussion regarding PAKE draft",
      "url": "https://github.com/chris-wood/draft-bmw-tls-pake13/issues/3",
      "state": "OPEN",
      "author": "BjoernMHaase",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "\r\n\r\n\r\n>Hi Chris, \r\n>\r\n>thank you for again starting an effort for having PAKE integrated within TLS. I appreciate that.\r\n>\r\n>Hi Laura and Samir,\r\n>\r\n>with this mail I\u2019d like to establish the contact to you and offer support with getting things further here.\r\n>\r\n>\r\n>I have just had a very first look at your draft when sitting in some meetings in IETF121. I am having the following preliminary feedback:\r\n>\r\n>- I think that we will have to clarify on what client and server are to have included in their respective messages. I see the issue with >your draft that while the client will be able to include its client identity it might not be having a server identity value available when >starting the protocol. I.e. the client will not be able in practice to provide the structure that you currently specify:\r\n>\r\n>  struct {\r\n>       NamedPAKE   named_pake;\r\n>       opaque      client_identity<0..2^16-1>;\r\n>       opaque      server_identity<0..2^16-1>;\r\n>       opaque      pake_message<1..2^16-1>;\r\n>   } PAKEShare;\r\n>\r\n>Instead I see the need that the mechanism is as follows: The client transmits a client identity field which *may* be empty. The server >includes a server identity field which also *may* be empty.\r\n \r\nThis is exactly what the draft specifies: the client and server identities are optional values on the wire. If they are present for the application, they are included, otherwise they are not. \r\n\r\n>Similarly to the certificate chain validation in a certificate-based authentication protocol we would be having application hooks on >both sides which get the respective remote identity fields and accept or reject a connection request. Probably it would be helpful to >integrate an image on how the TLS core component interfaces with a PAKE software module outside of the TLS core.\r\n> \r\nThis is also specified in the draft, in that the server chooses its password registration record based on the ClientHello PAKE information. If a registration record exists, it attempts to use it for authentication. Otherwise, it does not. \r\n\r\n>- We should be clarifying what the PAKE algorithm specifier named_pake would be including. For symmetric PAKEs there might be >the option to have named_pake specifying the algorithm family (e.g. CPace or SPAKE2) and have a separate specification of the >cipher suite (e.g. group) to be used. I think that for augemented PAKE we will have to make the named_pake ID specify both, the >protocol-type and the cipher suite set used for running the PAKE protocol. This will be necessary because the actual password >verifiers stored by the server will depend not only on the protocol type but also on the cipher suites.\r\n\r\n>My suggestion would be to clarify this property in the draft and to make the named_pake number bundle together both, cipher suite >and protocol type together also for balanced PAKE.\r\n \r\nThis is already specified. The named_pake fully specifies the protocol, e.g., for SPAKE2PLUS_V1 fully specifies the group, hash function, KDF, and MAC algorithms to be used. It is expected that other named_pake values do the same. \r\n\r\n>\u2026. \r\n>\r\n>As a rough idea which will become relevant when drawing the interface image with the message flow between the PAKE module at >the client and at the server and the TLS core will be how to deal with the explicit key confirmation messages. In CPace we have made >a lot of effort for neat integration into TLS by explicitly keeping the key confirmation rounds separate from the PAKE protocol (and >leave it to TLS in the final two messages). This will not be the case for other PAKE constructions.\r\n \r\nIndeed, not every PAKE will be as easy to integrate as CPace or SPAKE2+, but we can cross that bridge when the time comes. If, for example, a PAKE protocol requires its own key confirmation (and cannot use the TLS Finished messages), then that named_pake would have to add a round trip to TLS. While this is undesirable, it\u2019s also not a dealbreaker.\r\n \r\nBest,\r\nChris\r\n\r\n>\u2026\r\n>\r\n>Yours,\r\n>\r\n>Bj\u00f6rn,\r\n\r\n\r\n\r\nP.S.: I hope that you will be accepting such prelimary feedback. Please tell me if you happen to feel spammed with preliminary thoughts like the ones above which have not be thought through to all details and consequences yet. In this case I will try to give you a more comprehensive feedback and not rough ideas as above in the future. \r\nMit freundlichen Gr\u00fc\u00dfen | Best Regards \r\nDr. Bj\u00f6rn Haase \r\n",
      "createdAt": "2024-11-07T16:32:10Z",
      "updatedAt": "2024-11-07T16:36:07Z",
      "closedAt": null,
      "comments": [
        {
          "author": "BjoernMHaase",
          "authorAssociation": "NONE",
          "body": "\r\nChris, I think that we should probably be having an image where we detail what interface we are\r\nabout to specify. I fear that otherwise we might be having difficulties regarding the abstraction layer\r\n\r\nIMO we should be talking about the interface between a component that I\u2019d be calling \u201cTLS core\u201d\r\nand components that I\u2019d be calling \u201cPAKE adapter\u201d.\r\n\r\n\r\n```\r\n    Client\r\n    -----------------------  ---------------------|\r\n     Application layer      |                     |   \r\n                            |  Client-side        |\r\n    Password           -->  |  TLS PAKE adapter   |\r\n    Client MD          -->  |                     |\r\n                            |  PAKE MSG 1+2  ->-- |\r\n    Server MD          <--  |  PAKE RSP     -<- | |   \r\n    session ID         <--  |  SK        ->-| | | |     \r\n                            |               | | | |     \r\n                             --------- ===========\r\n    IP address + port  -->  |         |           |\r\n                            |   TCP   |    TLS    |\r\n           downlink <--     |         |   core    |\r\n           uplink    -->    |         |           |\r\n    -----------------------  ---------  ---------\r\n\r\n\r\n    Server\r\n    -----------------------  ---------------------|\r\n     Application layer      |                     |   \r\n                            |  Server-side        |\r\n    Password/Verifier  -->  |  TLS PAKE adapter   |\r\n    Server MD          -->  |                     |\r\n                            |  PAKE MSG 1+2  -<-- |\r\n    Client MD          <--  |  PAKE RSP     ->- | |\r\n    session ID         <--  |  SK        ->-| | | |\r\n                            |               | | | |\r\n                             --------- ===========\r\n    IP address + port  <--  |         |           |\r\n                            |   TCP   |    TLS    |\r\n           downlink  -->    |         |   core    |\r\n           uplink    <--    |         |           |\r\n    -----------------------  ---------  ---------\r\n\r\n\r\n```I.e. even if I believe that we should have the PAKE Adapter code be a part\r\nof the TLS library code, I think that for the purpose of software interfaces\r\nin the code and for the purpose of the specification we should consider\r\nthat the TLS library will have an adapter and a core component on both sides.\r\n\r\nIn the scope of the draft I suggest, that one should be specifying the interface that I highlighted\r\nwith double lines \u201c======\u201d .\r\n\r\nIMO we should be specifying what should be done in the TLS core part\r\nand what has to be provided by the PAKE adapters on both sides and in which\r\nsequence.\r\n\r\nWe then would be having a separate block specifying how the PAKE adapter\r\nblocks shall behave for each of the protocols.\r\n\r\nSaying this, at the ======= interface level we should probably not specify\r\non the actual contents within the PAKE message and response semantics\r\nas this might vary with the actual PAKE protocol in some details.\r\n\r\nOn the interface to the application layer I would distinguish between the concept\r\nof client metadata and server metadata and actual data fields within the PAKE\r\nmessages.\r\n\r\n2.) \r\n\r\nI also think that we should be preparing the option of supplying an interface\r\nbetween the TLS core parts and the TLS PAKE adapter parts for giving\r\nthe TLS core component access to a private/public key pair maintained in\r\nthe TLS PAKE adapter component.\r\n\r\nThe reason is that this would help integrating both OPAQUE and would also\r\nallow for re-using the exact same same interface for FIDO2-based two-factor\r\nauthentication (password + TOKEN).\r\n\r\nI.e. one might prepare the interface \u201c===========\u201d such that it is configurable\r\nwhether client and server shall or shall not activate the certificate-based authentication\r\ncomponent present in today\u2019s TLS core implementations or not.\r\n\r\n\r\nYours,\r\n\r\nBj\u00f6rn\r\n",
          "createdAt": "2024-11-07T16:36:05Z",
          "updatedAt": "2024-11-07T16:36:05Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOM83jm85-RCkk",
      "title": "Cleanup based on discussions",
      "url": "https://github.com/chris-wood/draft-bmw-tls-pake13/pull/1",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-10T20:02:55Z",
      "updatedAt": "2024-10-11T10:28:47Z",
      "baseRepository": "chris-wood/draft-bmw-tls-pake13",
      "baseRefName": "main",
      "baseRefOid": "1debde36975d78814b9c8bc0bd3f1cf6605ed895",
      "headRepository": "chris-wood/draft-bmw-tls-pake13",
      "headRefName": "caw/edits",
      "headRefOid": "171b12554de1babd31115d65c5a0644459e757aa",
      "closedAt": "2024-10-11T10:28:47Z",
      "mergedAt": "2024-10-11T10:28:47Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ce996c17c57ed0872bfc9f77ea2f3cd7abd68660"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOM83jm86Mw-Pz",
          "commit": {
            "abbreviatedOid": "0245cd4"
          },
          "author": "baumanl",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-11T00:07:20Z",
          "updatedAt": "2024-10-11T00:07:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOM83jm85-y2Qn",
      "title": "Cleanup",
      "url": "https://github.com/chris-wood/draft-bmw-tls-pake13/pull/2",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "OWNER",
      "assignees": [
        "menonsamir",
        "baumanl"
      ],
      "labels": [],
      "body": "Mandate protocol simulation and fixup some other things.",
      "createdAt": "2024-10-16T09:00:50Z",
      "updatedAt": "2024-10-17T19:46:30Z",
      "baseRepository": "chris-wood/draft-bmw-tls-pake13",
      "baseRefName": "main",
      "baseRefOid": "7efdd7a622e45cf84b06b874db5beacf8d7bd6df",
      "headRepository": "chris-wood/draft-bmw-tls-pake13",
      "headRefName": "caw/cleanup",
      "headRefOid": "593af2ba9915666d42d968f4d14173bb451ecd27",
      "closedAt": "2024-10-17T19:46:30Z",
      "mergedAt": "2024-10-17T19:46:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0207b2f04d237f9fceca966615adfa0a48268de4"
      },
      "comments": [],
      "reviews": []
    }
  ]
}